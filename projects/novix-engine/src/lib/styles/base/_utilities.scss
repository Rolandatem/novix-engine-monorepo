@use "sass:map";
@use 'variables' as *;
@use 'mixins' as *;
@use 'utilities-placeholders';

// ================================================
// Spacing Utilities
// ================================================
@each $abbr, $props in $novix-spacing-directions {
  @each $size, $value in $novix-spacing-scale {
    .m#{$abbr}-#{$size} {
      @extend %m#{$abbr}-#{$size};
    }
    @each $bp, $bp-width in $novix-breakpoints {
      .m#{$abbr}-#{$bp}-#{$size} {
        @include novix-respond($bp) {
          @each $prop in $props {
            #{$prop}: $value !important;
          }
        }
      }
    }
  }
}

@each $abbr, $props in $novix-padding-directions {
  @each $size, $value in $novix-spacing-scale {
    .p#{$abbr}-#{$size} {
      @extend %p#{$abbr}-#{$size};
    }
    @each $bp, $bp-width in $novix-breakpoints {
      .p#{$abbr}-#{$bp}-#{$size} {
        @include novix-respond($bp) {
          @each $prop in $props {
            #{$prop}: $value !important;
          }
        }
      }
    }
  }
}

// ================================================
// Display Utilities
// ================================================
@each $display in $novix-display-values {
  .d-#{$display} {
    @extend %d-#{$display};
  }
  @each $bp, $bp-width in $novix-breakpoints {
    .d-#{$bp}-#{$display} {
      @include novix-respond($bp) {
        display: $display !important;
      }
    }
  }
}

// ================================================
// Flex Wrap Utilities
// ================================================
@each $wrap in $novix-flex-wrap-values {
  .flex-#{$wrap} {
    @extend %flex-#{$wrap};
  }
  @each $bp, $bp-width in $novix-breakpoints {
    .flex-#{$bp}-#{$wrap} {
      @include novix-respond($bp) {
        flex-wrap: $wrap !important;
      }
    }
  }
}

// ================================================
// Flex Direction Utilities
// ================================================
@each $dir in $novix-flex-directions {
  .flex-#{$dir} {
    @extend %flex-#{$dir};
  }
  @each $bp, $bp-width in $novix-breakpoints {
    .flex-#{$bp}-#{$dir} {
      @include novix-respond($bp) {
        flex-direction: $dir !important;
      }
    }
  }
}

// ================================================
// Flex Grow/Shrink Utilities
// ================================================
@each $val in (0, 1, 2, 3) {
  .flex-grow-#{$val} {
    @extend %flex-grow-#{$val};
  }

  .flex-shrink-#{$val} {
    @extend %flex-shrink-#{$val};
  }

  @each $bp, $bp-width in $novix-breakpoints {
    .flex-grow-#{$bp}-#{$val} {
      @include novix-respond($bp) {
        flex-grow: $val !important;
      }
    }
    .flex-shrink-#{$bp}-#{$val} {
      @include novix-respond($bp) {
        flex-shrink: $val !important;
      }
    }
  }
}

// ================================================
// Gap Utilities
// ================================================
@each $key, $size in $novix-spacing-scale {
  .g-#{$key}   { @extend %g-#{$key}; }
  .gx-#{$key}  { @extend %gx-#{$key}; }
  .gy-#{$key}  { @extend %gy-#{$key}; }

  @each $bp, $bp-width in $novix-breakpoints {
    .g-#{$bp}-#{$key}   { @include novix-respond($bp) { gap: $size !important; } }
    .gx-#{$bp}-#{$key}  { @include novix-respond($bp) { column-gap: $size !important; } }
    .gy-#{$bp}-#{$key}  { @include novix-respond($bp) { row-gap: $size !important; } }
  }
}

// ================================================
// Order Utilities
// ================================================
@each $val in (0, 1, 2, 3, 4, 5) {
  .order-#{$val} { @extend %order-#{$val}; }

  @each $bp, $bp-width in $novix-breakpoints {
    .order-#{$bp}-#{$val} {
      @include novix-respond($bp) {
        order: $val !important;
      }
    }
  }
}

@each $keyword, $val in (first: -1, last: 999) {
  .order-#{$keyword} { @extend %order-#{$keyword}; }

  @each $bp, $bp-width in $novix-breakpoints {
    .order-#{$bp}-#{$keyword} {
      @include novix-respond($bp) {
        order: $val !important;
      }
    }
  }
}

// ================================================
// Justify Content
// ================================================
@each $key, $val in $novix-justify-values {
  .justify-content-#{$key} { @extend %justify-content-#{$key}; }

  @each $bp, $bp-width in $novix-breakpoints {
    .justify-content-#{$bp}-#{$key} {
      @include novix-respond($bp) {
        justify-content: $val !important;
      }
    }
  }
}

// ================================================
// Align Items
// ================================================
@each $key, $val in $novix-align-values {
  .align-items-#{$key} { @extend %align-items-#{$key}; }

  @each $bp, $bp-width in $novix-breakpoints {
    .align-items-#{$bp}-#{$key} {
      @include novix-respond($bp) {
        align-items: $val !important;
      }
    }
  }
}

// ================================================
// Container Utilities
// ================================================
.container { @extend %container; }
.container-fluid { @extend %container-fluid; }

// ================================================
// Border Width
// ================================================
@each $key, $val in $novix-border-width-values {
  .border-#{$key} {
    @extend %border-#{$key};
  }

  .border-top-#{$key}     { @extend %border-top-#{$key}; }
  .border-end-#{$key}     { @extend %border-end-#{$key}; }
  .border-bottom-#{$key}  { @extend %border-bottom-#{$key}; }
  .border-start-#{$key}   { @extend %border-start-#{$key}; }
}

// ================================================
// Border Style
// ================================================
@each $style in $novix-border-styles {
  .border-#{$style} { @extend %border-#{$style}; }

  .border-top-#{$style}     { @extend %border-top-#{$style}; }
  .border-end-#{$style}     { @extend %border-end-#{$style}; }
  .border-bottom-#{$style}  { @extend %border-bottom-#{$style}; }
  .border-start-#{$style}   { @extend %border-start-#{$style}; }
}

// ================================================
// Border Radius
// ================================================
@each $key, $val in $novix-radius-scale {
  .rounded-#{$key} {
    @extend %rounded-#{$key};
  }

  .rounded-top-#{$key}    { @extend %rounded-top-#{$key}; }
  .rounded-end-#{$key}    { @extend %rounded-end-#{$key}; }
  .rounded-bottom-#{$key} { @extend %rounded-bottom-#{$key}; }
  .rounded-start-#{$key}  { @extend %rounded-start-#{$key}; }
}
